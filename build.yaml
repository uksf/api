trigger:
  branches:
    include:
      - master

#pool:
#  vmImage: 'ubuntu-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

jobs:
  - job: BuildTest
    displayName: Build & Test
    steps:

      - task: SonarCloudPrepare@1
        inputs:
          SonarCloud: 'Codat - SonarCloud - Clients API'
          organization: 'codat'
          scannerMode: 'MSBuild'
          projectKey: 'Codat_Clients-API'
          projectName: 'Clients API'
          extraProperties: 'sonar.cs.opencover.reportsPaths=$(Build.SourcesDirectory)/**/coverage.opencover.xml'

      - task: DotNetCoreCLI@2
        displayName: 'Restore'
        inputs:
          command: 'restore'
          projects: '$(solution)'
          feedsToUse: 'config'
          nugetConfigPath: 'NuGet.config'
          externalFeedCredentials: 'Codat NuGet'

      - task: DotNetCoreCLI@2
        displayName: 'Build'
        inputs:
          command: 'build'
          projects: '$(solution)'
          arguments: '/p:DeployOnBuild=false /p:WebPublishMethod=Package /p:SkipInvalidConfigurations=true /p:PackageLocation="$(build.stagingDirectory)" /p:configuration="Release" --no-restore'

      - task: DotNetCoreCLI@2
        displayName: 'Test'
        inputs:
          command: 'test'
          projects: '**/*.Tests*.csproj'
          arguments: '--configuration $(BuildConfiguration) /p:CollectCoverage=true /p:CoverletOutputFormat=opencover --no-build'

      - task: SonarCloudAnalyze@1

      - task: SonarCloudPublish@1
        inputs:
          pollingTimeoutSec: '30'

  - job: PublishArtifacts
    displayName: Publish Artifacts
    dependsOn: BuildTest
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
    steps:

      - task: DotNetCoreCLI@2
        displayName: 'Restore'
        inputs:
          command: 'restore'
          projects: '$(solution)'
          feedsToUse: 'config'
          nugetConfigPath: 'NuGet.config'
          externalFeedCredentials: 'Codat NuGet'

      - task: DotNetCoreCLI@2
        displayName: 'Publish WebApi (without zipping)'
        inputs:
          command: publish
          publishWebProjects: false
          projects: '**/Codat.Clients.Api.csproj'
          arguments: '-c Release --output $(Build.BinariesDirectory)/Codat.Clients.Api'
          zipAfterPublish: false
          modifyOutputPath: false

      - task: DotNetCoreCLI@2
        displayName: 'Pack Codat.Clients.Api.Client'
        inputs:
          command: 'pack'
          vstsFeed: '346be1b7-5a18-453a-84be-b51f2e6f09a4'
          packagesToPack: '**/Codat.Clients.Api.Client.csproj'
          versioningScheme: 'off'
          includeSymbols: true

      - task: ArchiveFiles@2
        displayName: 'Zip Artifact API + Jobs'
        inputs:
          rootFolderOrFile: '$(Build.BinariesDirectory)/Codat.Clients.Api'
          includeRootFolder: false
          archiveType: 'zip'
          archiveFile: '$(Build.ArtifactStagingDirectory)/Codat.Clients.Api.zip'
          replaceExistingArchive: true

      - task: PublishBuildArtifacts@1
        displayName: 'Publish Artifact'
        inputs:
          PathtoPublish: '$(build.artifactstagingdirectory)/Codat.Clients.Api.zip'
          ArtifactName: 'Api'
          publishLocation: 'Container'

      - task: NuGetCommand@2
        displayName: 'Publish All Packages And Symbols'
        inputs:
          command: 'push'
          packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.nupkg;!$(Build.ArtifactStagingDirectory)/**/*.symbols.nupkg'
          nuGetFeedType: 'internal'
          publishVstsFeed: '346be1b7-5a18-453a-84be-b51f2e6f09a4'
          allowPackageConflicts: true
